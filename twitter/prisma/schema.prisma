// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @map(name: "refresh_token") @db.Text
  access_token      String?  @map(name: "access_token") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([providerAccountId], name: "providerAccountId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?

  displayName String? @map(name: "display_name")
  phoneNumber String? @map(name: "phone_number")
  bio         String? @db.Text
  location    String?
  website     String?
  birthday    String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  tweets   Tweet[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_requests")
}

model Tweet {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @map(name: "updated_at")
  userId    Int      @map(name: "user_id")
  imageUrls String[] @map(name: "image_urls")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "tweets")
}
